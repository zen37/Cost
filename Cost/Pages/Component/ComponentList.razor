@page "/components"

@inject IComponentRepository _component
@inject IJSRuntime _jsRuntime

@attribute [Authorize]

<PageTitle>Ingredients</PageTitle>
<AuthorizeView>
    <Authorized>
        @*<_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>*@
        <h1>Ingredients</h1>

        @if (components == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            @*<table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Unit of Measure</th>
                        <th>Wastage</th>
                        <th>Other</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var component in components)
                    {
                        <tr>
                            <td>@component.Name</td>
                            <td>@component.Price</td>
                            <td>@component.UoM</td>
                            <td>@component.Wastage</td>
                            <td>@component.Other</td>
                            <td>
                                <NavLink href="@($"/component/edit/{component.ComponentId}")" class="btn-success btn">Edit</NavLink>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="()=>Delete(component.ComponentId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>*@

            <SfGrid @ref="Grid" DataSource="@components" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update"})">
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" TValue="ComponentDTO"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(ComponentDTO.Name) HeaderText="Name" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(ComponentDTO.Price) HeaderText="Price" Format="C2"></GridColumn>
                    <GridColumn Field=@nameof(ComponentDTO.Wastage) HeaderText="Wastage" Format="N2"></GridColumn>
                    <GridColumn Field=@nameof(ComponentDTO.UoM) HeaderText="UoM" EditType="EditType.DropDownEdit">
                        <EditTemplate Context="ctx">
                            <SfDropDownList @bind-Value="(ctx as ComponentDTO).UoM" TValue="string" TItem="string" ID="UoM" DataSource="@UnitsOfMeasure"></SfDropDownList>
                        </EditTemplate>
                    </GridColumn>
                    <GridColumn Field=@nameof(ComponentDTO.Other) HeaderText="Other"></GridColumn>
                    <GridColumn HeaderText="Manage Records" Width="150">
                        <GridCommandColumns>
                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        }

    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>

@code {

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;
    public bool isLoading { get; set; } = true;
    private int DeleteComponentId { get; set; } = 0;
    private IEnumerable<ComponentDTO> components { get; set; } = new List<ComponentDTO>();
    private SfGrid<ComponentDTO> Grid { get; set; }
    static List<string> UnitsOfMeasure = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadComponents);
    }

    private async Task LoadComponents()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            components = await _component.GetAll(authenticatedUserId);
        }
        if (!UnitsOfMeasure.Any())
        {
            UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
        }
        isLoading = false;
    }

    //private void Delete(int id)
    //{
    //    DeleteComponentId = id;
    //    _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    //}

    //public async Task ConfirmDelete_Click(bool isConfirmed)
    //{
    //    if (isConfirmed && DeleteComponentId != 0)
    //    {
    //        // delete
    //        await _component.Delete(DeleteComponentId);
    //        await LoadComponents();
    //        await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    //    }
    //}

    public async Task OnActionBegin(ActionEventArgs<ComponentDTO> args)
    {
        if (args.RequestType.ToString() == "Save")
        {
            Console.WriteLine("save");
            if (args.Data.ComponentId == 0)
            {
                args.Data.UserId = authenticatedUserId;
                await _component.Create(args.Data);
            }
            else
            {
                args.Data.UserId = authenticatedUserId;
                await _component.Update(args.Data);
            }
        }
        if (args.RequestType.ToString() == "Delete")
        {
            Console.WriteLine("delete");
            await _component.Delete(args.Data.ComponentId);
            components = await _component.GetAll(authenticatedUserId);
        }
    }

    public async Task OnActionComplete(ActionEventArgs<ComponentDTO> args)
    {
        if (args.RequestType.ToString() == "Add" || args.RequestType.ToString() == "BeginEdit")
        {
            args.PreventRender = false;
        }
        if (args.RequestType.ToString() == "Save")
        {
            components = await _component.GetAll(authenticatedUserId);
            await Grid.Refresh();
        }
    }
}

