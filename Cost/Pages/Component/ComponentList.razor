@page "/components"

@inject IComponentRepository _component
@inject IProductComponentRepository _ProductComponentRepository
@attribute [Authorize]

<PageTitle>Ingredients</PageTitle>
<AuthorizeView>
    <Authorized>
        <h3>Ingredients</h3>

        @if (components == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <SfToast ID="toast_default" @ref="ToastObj" Title="CANNOT DELETE THIS INGREDIENT" Content="@ToastContent"
                     ShowCloseButton="true" NewestOnTop="true" ShowProgressBar="true">
                <ToastPosition X="Center"></ToastPosition>
            </SfToast>

            <SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
                <DialogEvents Closed="Closed"></DialogEvents>
                <DialogTemplates>
                    <Header> Delete Record</Header>
                    <Content> Are you sure you want to delete @SelectedData.Name ?</Content>
                </DialogTemplates>
                <DialogButtons>
                    <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true"></DialogButton>
                    <DialogButton OnClick="@CancelClick" Content="Cancel"></DialogButton>
                </DialogButtons>
            </SfDialog>

            <div style="height: calc(100vh - 8rem); " class=".col-12">
                <SfGrid @ref="Grid" DataSource="@components" AllowPaging="true" AllowSorting="true" AllowResizing="true" Width="100%" Height="100%" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Search"})">
                    <GridPageSettings PageSize="30"></GridPageSettings>
                    <GridEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" RowSelected="RowSelectHandler" TValue="ComponentDTO"></GridEvents>
                    <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                    <GridColumns>
                        <GridColumn Field=@nameof(ComponentDTO.Name) HeaderText="Name" IsPrimaryKey="true" AllowEditing="false" Width="210"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.Amount) HeaderText="Amount" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.UoM) HeaderText="Qty" EditType="EditType.DropDownEdit" Width="90">
                            <EditTemplate Context="ctx">
                                <label>Quantity</label>
                                <SfDropDownList @bind-Value="(ctx as ComponentDTO).UoM" TValue="string" TItem="string" ID="UoM" DataSource="@UnitsOfMeasure"></SfDropDownList>
                            </EditTemplate>
                        </GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.BaseUoM) HeaderText="UoM" AllowAdding="false" AllowEditing="false" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.Price) HeaderText="Price" Format="C2" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.UnitPrice) HeaderText="UoM Pr." Format="N3" AllowAdding="false" AllowEditing="false" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.Wastage) HeaderText="Wastage(%)" Format="N2" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.Vendor) HeaderText="Vendor" Width="90"></GridColumn>
                        <GridColumn Field=@nameof(ComponentDTO.Other) HeaderText="Other" Width="120"></GridColumn>
                        <GridColumn HeaderText="Manage Records" Width="150">
                            <GridCommandColumns>
                                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat" })"></GridCommandColumn>
                                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat" })"></GridCommandColumn>
                            </GridCommandColumns>
                        </GridColumn>
                    </GridColumns>
                </SfGrid>
            </div>
        }

    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;
    public bool isLoading { get; set; } = true;
    private int DeleteComponentId { get; set; } = 0;
    private IEnumerable<ComponentDTO> components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    private SfGrid<ComponentDTO> Grid { get; set; }
    private SfDialog Dialog;
    public ComponentDTO SelectedData;
    public bool flag = true;
    private SfToast ToastObj;
    static List<string> UnitsOfMeasure = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadComponents);
        if (!UnitsOfMeasure.Any())
        {
            UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
        }
        isLoading = false;
    }

    private async Task LoadComponents()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            components = await _component.GetAll(authenticatedUserId);
            foreach (var comp in components)
            {
                comp.UnitPrice = Calculate.GetUnitPrice(comp.Amount, comp.UoM, comp.Price);
                comp.UoM = UtilitiesUoM.GetAbbreviationbyName(comp.UoM);
                comp.BaseUoM = UtilitiesUoM.GetBaseUnit(comp.UoM);
            }
            ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId);
        }
    }

    public async Task OnActionBegin(ActionEventArgs<ComponentDTO> args)
    {
        if (args.RequestType.ToString() == "BeginEdit")
        {
            args.Data.UoM = UtilitiesUoM.GetNamebyAbbreviation(args.Data.UoM);
        }
        if (args.RequestType.ToString() == "Save")
        {
            Console.WriteLine("save");
            if (args.Data.ComponentId == 0)
            {
                args.Data.UserId = authenticatedUserId;
                await _component.Create(args.Data);
            }
            else
            {
                args.Data.UserId = authenticatedUserId;
                await _component.Update(args.Data);
            }
        }
        if (args.RequestType.ToString() == "Delete")
        {
            Console.WriteLine("delete");
            var DeleteProductComponent = ProductComponents.FirstOrDefault(p => p.ComponentIngredientId == args.Data.ComponentId);
            if (DeleteProductComponent != null)
            {
                args.Cancel = true;
                ShowToast();
            }
            else
            {
                if (flag)
                {
                    await Dialog.ShowAsync();
                    flag = false;
                }
            }
        }
    }

    public async Task OnActionComplete(ActionEventArgs<ComponentDTO> args)
    {
        if (args.RequestType.ToString() == "Add" || args.RequestType.ToString() == "BeginEdit")
        {
            args.PreventRender = false;
        }
        if (args.RequestType.ToString() == "Save")
        {
            await Task.Run(LoadComponents);
            await Grid.Refresh();
        }
    }

    private string ToastContent = "<div>Please delete after removing from recepe.</div>";
    private async Task ShowToast()
    {
        await this.ToastObj.ShowAsync();
    }

    public void Closed()
    {
        flag = true;
    }

    public void RowSelectHandler(RowSelectEventArgs<ComponentDTO> Args)
    {
        SelectedData = Args.Data;
    }

    private async void OkClick()
    {
        await _component.Delete(SelectedData.ComponentId);
        await Dialog.HideAsync();
        await Task.Run(LoadComponents);
        await Grid.Refresh();
    }

    private async void CancelClick()
    {
        await Dialog.HideAsync();
        await Task.Run(LoadComponents);
        await Grid.Refresh();
    }
}

