@page "/components"

@inject IComponentRepository _component
@inject IJSRuntime _jsRuntime

@attribute [Authorize]

<PageTitle>Ingredients</PageTitle>
<AuthorizeView>
    <Authorized>
        <_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
        <h1>Ingredients</h1>

        @if (components == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Unit of Measure</th>
                        <th>Wastage</th>
                        <th>Other</th>
                        <th></th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var component in components)
                    {
                        <tr>
                            <td>@component.Name</td>
                            <td>@component.Price</td>
                            <td>@component.UoM</td>
                            <td>@component.Wastage</td>
                            <td>@component.Other</td>
                            <td>
                                <NavLink href="@($"/component/edit/{component.ComponentId}")" class="btn-success btn">Edit</NavLink>
                            </td>
                            <td>
                                <button class="btn btn-danger" @onclick="()=>Delete(component.ComponentId)">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>
@code {

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;

    public bool isLoading { get; set; } = true;
    private int DeleteComponentId { get; set; } = 0;
    private IEnumerable<ComponentDTO> components { get; set; } = new List<ComponentDTO>();


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadComponents);
    }

    private async Task LoadComponents()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            components = await _component.GetAll(authenticatedUserId);
        }

        isLoading = false;
    }

    private void Delete(int id)
    {
        DeleteComponentId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteComponentId != 0)
        {
            // delete
            await _component.Delete(DeleteComponentId);
            await LoadComponents();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}

