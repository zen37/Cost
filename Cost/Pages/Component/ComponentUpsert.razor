@page "/component/create"
@page "/component/edit/{id:int}"


@inject NavigationManager _nav
@inject IComponentRepository _component


<PageTitle>Add Ingredient</PageTitle>

@attribute [Authorize]
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Ingredient</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Component" OnValidSubmit="UpsertComponent">
                <DataAnnotationsValidator />
                <ValidationSummary/>
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Component.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Component.Name"></ValidationMessage>
                    <label>Name</label>
                    <InputNumber @bind-Value="Component.Price" class="form-control"></InputNumber>
                    <ValidationMessage For="()=>Component.Price"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                    <NavLink href="category" class="btn btn-secondary">Back to Index</NavLink>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    private bool IsLoading { get; set; }
    private string Title { get; set; } = "Create";

    private ComponentDTO Component { get; set; } = new ComponentDTO();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                Title = "Update";
                await LoadComponent();
            }
        }

    }

    private async Task LoadComponent()
    {
        IsLoading = true;
        StateHasChanged();
        Component = await _component.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }


    private async Task UpsertComponent()
    {
        if (Component.Id == 0)
        {
            await _component.Create(Component);
        }
        else
        {
            await _component.Update(Component);
        }
     //   _nav.NavigateTo("category");
    }

}
