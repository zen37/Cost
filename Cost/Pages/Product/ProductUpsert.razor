@page "/product/create"
@page "/product/edit/{id:int}"

@inject NavigationManager _nav
@inject IProductRepository _product

<PageTitle>Add Product</PageTitle>

@attribute [Authorize]
<div class="row my-2">
    <h3 class="card-title text-primary mb-3 ml-3">@Title Product</h3>

    <div class="col-10">
        @if (IsLoading)
        {
            <div class="text-center">
                <img src="/images/loading.gif">
            </div>
        }
        else
        {
            <EditForm Model="Product" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="Product.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=>Product.Name"></ValidationMessage>
                    <label>Other</label>
                    <InputTextArea @bind-Value="Product.Other" class="form-control"></InputTextArea>
                    <ValidationMessage For="()=>Product.Other"></ValidationMessage>
                </div>
                <div class="form-group py-2">
                    <button class="btn btn-primary">@Title</button>
                </div>
            </EditForm>
        }
    </div>
</div>


@code {

    [Parameter]
    public int Id { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }

    private string authenticatedUserId;

    private bool IsLoading { get; set; }
    private string Title { get; set; } = "Create";

    private ProductDTO Product { get; set; } = new ProductDTO();

    private List<string> UnitsOfMeasure = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationState).User;

        if (user.Identity.IsAuthenticated)
        {
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            //   var currentUserEmail = currentUser.Email;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

        }
        else
        {
            // user is not logged in
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (Id == 0)
            {
                IsLoading = false;
            }
            else
            {
                Title = "Update";
                await LoadProduct();
            }
        }

    }

    private async Task LoadProduct()
    {
        IsLoading = true;
        StateHasChanged();
        Product = await _product.Get(Id);
        IsLoading = false;
        StateHasChanged();
    }


    private async Task UpsertProduct()
    {
        if (Product.Id == 0)
        {
            Product.UserId = authenticatedUserId;
            await _product.Create(Product);
        }
        else
        {
            Product.UserId = authenticatedUserId;
            await _product.Update(Product);
        }
        _nav.NavigateTo("products");
    }

}

@*@inject NavigationManager _nav

<PageTitle>Products</PageTitle>
<h1>Products</h1>

@attribute [Authorize]
@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Cost</th>
                <th>Cost Last Calculated</th>
                <th>Cost Current</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Cost</td>
                    <td>@product.CostCalculatedLast</td>
                    <td>@product.CostDynamic</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private Product[]? products;


    protected override async Task OnInitializedAsync()
    {

        DateTime dt = new DateTime();

        Product oatnilla = new Product { Name = "Oatnilla (Half Gallon)", Cost = 32, CostCalculatedLast = dt, CostDynamic = 34 };

        products = new Product[1];
        products[0] = oatnilla;
    }
}*@