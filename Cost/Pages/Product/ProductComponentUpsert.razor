@page "/product/price/{Id:int}"
@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject IProductComponentRepository _ProductComponentRepository
@inject NavigationManager _nav
@using Action = Syncfusion.Blazor.Grids.Action

<h3>Product Price Management</h3>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row border p-2 mb-4 col-12">
        <div class="card-body">
            <h4>@Product.Name</h4>
            <span>
                @Product.Other
            </span>
        </div>
    </div>

    <SfDialog @ref="Dialog" Width="250px" Visible="false" ShowCloseIcon="true" IsModal="true">
        <DialogEvents Closed="Closed"></DialogEvents>
        <DialogTemplates>
            <Header> Delete Record</Header>
            <Content> Are you sure you want to delete @SelectedData.Name ?</Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="@OkClick" Content="OK" IsPrimary="true"></DialogButton>
            <DialogButton OnClick="@CancelClick" Content="Cancel"></DialogButton>
        </DialogButtons>
    </SfDialog>

    <div style="height: calc(100vh - 16rem); " class=".col-12">
        <SfGrid @ref="Grid" DataSource="@ProductComponents" AllowPaging="true" AllowSorting="true" AllowResizing="true" Width="100%" Height="100%" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update", "Search"})">
            <GridPageSettings PageSize="30"></GridPageSettings>
            <GridEvents OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" RowSelected="RowSelectHandler" TValue="ProductComponentDTO"></GridEvents>
            <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Normal"></GridEditSettings>

            <GridAggregates>
                <GridAggregate>
                    <GridAggregateColumns>
                        <GridAggregateColumn Field=@nameof(ProductComponentDTO.Price) Type="AggregateType.Sum" Format="N2">
                            <FooterTemplate>
                                @{
                                    var aggregate = (context as AggregateTemplateContext);
                                    <div>
                                        <p>Sum: @aggregate.Sum</p>
                                    </div>
                                    Product.Cost = double.Parse(@aggregate.Sum);
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                        <GridAggregateColumn Field=@nameof(ProductComponentDTO.PriceWastage) Type="AggregateType.Sum" Format="N2">
                            <FooterTemplate>
                                @{
                                    var aggregate = (context as AggregateTemplateContext);
                                    <div>
                                        <p>Sum: @aggregate.Sum</p>
                                    </div>
                                    Product.CostWastage = double.Parse(@aggregate.Sum);
                                }
                            </FooterTemplate>
                        </GridAggregateColumn>
                    </GridAggregateColumns>
                </GridAggregate>
            </GridAggregates>

            <GridColumns>
                <GridColumn Field=@nameof(ProductComponentDTO.Category) HeaderText="Category" EditType="EditType.DropDownEdit" AllowEditing="false" Width="120">
                    <EditTemplate>
                        <SfDropDownList @bind-Value="(context as ProductComponentDTO).Category" TValue="string" TItem="string" DataSource="@Category" Enabled="@(((context as ProductComponentDTO).Id == 0) ? true : false)">
                            <DropDownListEvents TValue="string" TItem="string" ValueChange="OnCategoryChange"></DropDownListEvents>
                        </SfDropDownList>
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(ProductComponentDTO.Name) HeaderText="Name" IsPrimaryKey="true" EditType="EditType.DropDownEdit" AllowEditing="false" Width="200">
                    <EditTemplate>
                        <SfDropDownList @bind-Value="(context as ProductComponentDTO).Name" TValue="string" TItem="string" ID="Name" DataSource="@NameSource" Enabled="@(((context as ProductComponentDTO).Id == 0) ? true : false)">
                            <DropDownListEvents TValue="string" TItem="string" ValueChange="OnNameChange"></DropDownListEvents>
                        </SfDropDownList>
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(ProductComponentDTO.Amount) HeaderText="Amount" Format="N1" ValidationRules="@(new ValidationRules{ Required= true })" Width="100">
                </GridColumn>
                <GridColumn Field=@nameof(ProductComponentDTO.UoM) HeaderText="UoM" EditType="EditType.DropDownEdit" Width="100">
                    <EditTemplate>
                        <SfDropDownList @bind-Value="(context as ProductComponentDTO).UoM" TValue="string" TItem="string" ID="UoM" DataSource="@ValidUoM"></SfDropDownList>
                    </EditTemplate>
                </GridColumn>
                <GridColumn Field=@nameof(ProductComponentDTO.Price) HeaderText="Price" AllowAdding="false" AllowEditing="false" Format="N2" Width="100">
                </GridColumn>
                <GridColumn Field=@nameof(ProductComponentDTO.PriceWastage) HeaderText="Price(Wastage)" AllowAdding="false" AllowEditing="false" Format="N2" Width="100"></GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <br />
    <button class="btn btn-primary" @onclick="()=>Save(Id)">Back</button>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    private IEnumerable<string> Category = new List<string>() { "ingredient", "product" };
    private bool isLoading { get; set; } = true;
    private IEnumerable<string> NameSource = new List<string>();
    private IEnumerable<string> ValidUoM = new List<string>();
    private IEnumerable<string> SameCategory = new List<string>();
    private IEnumerable<string> ProductSelect = new List<string>();
    private IEnumerable<string> IngredientSelect = new List<string>();
    SfGrid<ProductComponentDTO> Grid { get; set; }
    private SfDialog Dialog;
    public ProductComponentDTO SelectedData;
    public bool flag = true;
    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;
    private List<string> UnitsOfMeasure = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            if (user.Identity.IsAuthenticated)
            {
                var authenticatedUser = await userManager.GetUserAsync(user);
                authenticatedUserId = authenticatedUser.Id;
                ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId, Id);
                Components = await _componentRepository.GetAll(authenticatedUserId);
                Products = await _productRepository.GetAll(authenticatedUserId);
            }
            Product = await _productRepository.Get(Id);
            isLoading = false;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

            foreach (var pc in ProductComponents)
            {
                GetProperty(pc);
            }
            UpdateSelect();
            StateHasChanged();
        }
    }

    private void GetProperty(ProductComponentDTO comp)
    {
        comp.ProductId = Id;
        if (comp.ComponentIngredientId != null)
        {
            var c = Components.FirstOrDefault(c => c.ComponentId == comp.ComponentIngredientId);
            if (c != null)
            {
                comp.Name = c.Name;
                comp.Category = "ingredient";
                comp.UoM = UtilitiesUoM.GetAbbreviationbyName(comp.UoM);
                comp.Price = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitPrice(c.Amount, c.UoM, c.Price), comp.Amount);
                comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitWastagePrice(c.Amount, c.UoM, c.Price, c.Wastage), comp.Amount);
            }
        }
        else if (comp.ComponentProductId != null)
        {
            var p = Products.FirstOrDefault(p => p.Id == comp.ComponentProductId);
            if (p != null)
            {
                comp.Name = p.Name;
                comp.Category = "product";
                comp.UoM = UtilitiesUoM.GetAbbreviationbyName(comp.UoM);
                comp.Price = Calculate.GetProductComponentPrice(comp.UoM, p.Cost, comp.Amount);
                comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, p.CostWastage, comp.Amount);
            }
        }
        else
        {
            comp.Name = "Not Found";
            comp.Category = "Not Found";
        }
        return;
    }

    private void OnCategoryChange(ChangeEventArgs<string, string> args)
    {
        if (args.Value == "ingredient")
        {
            NameSource = IngredientSelect;
        }
        else
        {
            NameSource = ProductSelect;
        }
    }

    private void OnNameChange(ChangeEventArgs<string, string> args)
    {
        GetValidUoM(args.Value);
    }

    public async Task OnActionBegin(ActionEventArgs<ProductComponentDTO> args)
    {
        var comp = args.Data;
        if (args.RequestType.Equals(Action.Save))
        {
            Console.WriteLine("save");
            comp.ProductId = Product.Id;
            if (comp.Id == 0)
            {
                if (comp.Category == "ingredient")
                {
                    var c = Components.FirstOrDefault(x => x.Name == comp.Name);
                    comp.ComponentIngredientId = c.ComponentId;
                    comp.UserId = authenticatedUserId;
                    comp.Price = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitPrice(c.Amount, c.UoM, c.Price), comp.Amount);
                    comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitWastagePrice(c.Amount, c.UoM, c.Price, c.Wastage), comp.Amount);
                }
                else
                {
                    var p = Products.FirstOrDefault(x => x.Name == comp.Name);
                    comp.ComponentProductId = p.Id;
                    comp.UserId = authenticatedUserId;
                    comp.Price = Calculate.GetProductComponentPrice(comp.UoM, p.Cost, comp.Amount);
                    comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, p.CostWastage, comp.Amount);
                }
                await _ProductComponentRepository.Create(comp);
            }
            else
            {
                if (comp.Category == "ingredient")
                {
                    var c = Components.FirstOrDefault(x => x.ComponentId == comp.ComponentIngredientId);
                    comp.Price = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitPrice(c.Amount, c.UoM, c.Price), comp.Amount);
                    comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitWastagePrice(c.Amount, c.UoM, c.Price, c.Wastage), comp.Amount);
                }
                else
                {
                    var p = Products.FirstOrDefault(x => x.Id == comp.ComponentProductId);
                    comp.Price = Calculate.GetProductComponentPrice(comp.UoM, p.Cost, comp.Amount);
                    comp.PriceWastage = Calculate.GetProductComponentPrice(comp.UoM, p.CostWastage, comp.Amount);
                }
                await _ProductComponentRepository.Update(comp);
            }
        }
        if (args.RequestType.Equals(Action.Add))
        {
            Console.WriteLine("add");
            ValidUoM = new List<string>();
            UpdateSelect();
        }
        if (args.RequestType.Equals(Action.BeginEdit))
        {
            Console.WriteLine("edit");
            args.Data.UoM = UtilitiesUoM.GetNamebyAbbreviation(args.Data.UoM);
            GetValidUoM(comp.Name);
        }
        if (args.RequestType.Equals(Action.Delete))
        {
            Console.WriteLine("delete");
            if (flag)
            {
                await Dialog.ShowAsync();
                flag = false;
            }
        }
    }

    public async Task OnActionComplete(ActionEventArgs<ProductComponentDTO> args)
    {
        if (args.RequestType.ToString() == "Add" || args.RequestType.ToString() == "BeginEdit")
        {
            args.PreventRender = false;
        }
        if (args.RequestType.ToString() == "Save")
        {
            ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId, Id);
            foreach (var pc in ProductComponents)
            {
                GetProperty(pc);
            }
            await Grid.Refresh();
        }
    }

    private void GetValidUoM(string Name)
    {
        ValidUoM = new List<string>() { "each" };
        var comp = Components.FirstOrDefault(x => x.Name == Name);
        if (comp != null)
        {
            var UoM = comp.UoM;
            IEnumerable<UoM> SameCategory = UtilitiesUoM.GetListbyName(UoM);
            ValidUoM = SameCategory.Select(uom => uom.Name);
        }
    }

    private void UpdateSelect()
    {
        ProductSelect = Products.Where(p => !ProductComponents.Any(c => c.ComponentProductId == p.Id || c.ProductId == p.Id) && p.Id != Id).Select(p => p.Name).ToList();
        IngredientSelect = Components.Where(p => !ProductComponents.Any(c => c.ComponentIngredientId == p.ComponentId)).Select(p => p.Name).ToList();
    }

    private async void Save(int id)
    {
        await _productRepository.Update(Product);
        _nav.NavigateTo("products");
    }

    public void Closed()
    {
        flag = true;
    }

    public void RowSelectHandler(RowSelectEventArgs<ProductComponentDTO> Args)
    {
        SelectedData = Args.Data;
    }

    private async void OkClick()
    {
        await _ProductComponentRepository.Delete(SelectedData.Id);
        ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId, Id);
        foreach (var pc in ProductComponents)
        {
            GetProperty(pc);
        }
        UpdateSelect();
        await Dialog.HideAsync();
        await Grid.Refresh();
    }

    private async void CancelClick()
    {
        ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId, Id);
        foreach (var pc in ProductComponents)
        {
            GetProperty(pc);
        }
        UpdateSelect();
        await Dialog.HideAsync();
        await Grid.Refresh();
    }
}
