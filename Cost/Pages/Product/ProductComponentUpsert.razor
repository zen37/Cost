@page "/product/price/{Id:int}"
@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject IProductComponentRepository _ProductComponentRepository
@inject NavigationManager _nav

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>
                    @Product.Other
                </span>
            </div>
        </div>
    </div>

    <SfGrid @ref="GridRef" DataSource="@ProductComponents" AllowPaging="true" AllowSorting="true" AllowFiltering="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update" })">
        <GridPageSettings PageSize="5"></GridPageSettings>
        <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="@EditMode.Dialog">
            <Template>
                @{
                    var PC = (context as ProductComponentDTO);
                    <div>
                        <div class="form-row">
                            <div class="col">
                                <label>Category</label>
                                <SfDropDownList TValue="string" TItem="string" @bind-Value="@PC.Category" DataSource="@Category" Enabled="@((PC.Id == 0) ? true : false)">
                                    <DropDownListEvents TValue="string" TItem="string" ValueChange="OnCategoryChange"></DropDownListEvents>
                                </SfDropDownList>
                            </div>
                            <div class="col">
                                <label>Name</label>
                                <SfDropDownList TValue="string" TItem="string" ID="Name" @bind-Value="@(PC.Name)" Enabled="@((PC.Id == 0) ? true : false)" DataSource="@NameSource">
                                </SfDropDownList>
                            </div>
                            <div class="col">
                                <label>Amount</label>
                                <SfNumericTextBox ID="Amount" @bind-Value="@(PC.Amount)"></SfNumericTextBox>
                            </div>
                        </div>
                    </div>
                }
            </Template>
        </GridEditSettings>

        <GridColumns>
            <GridColumn Field=@nameof(ProductComponentDTO.Name) HeaderText="Name" IsPrimaryKey="true" AllowEditing="false">
            </GridColumn>
            <GridColumn Field=@nameof(ProductComponentDTO.Category) HeaderText="Category" AllowEditing="false"></GridColumn>
            <GridColumn Field=@nameof(ProductComponentDTO.Amount) HeaderText="Amount" Format="N1"></GridColumn>
        </GridColumns>
    </SfGrid>


    <button class="btn btn-primary" @onclick="()=>Save(Id)">Save</button>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    private List<string> Category = new List<string>() { "ingredient", "product" };
    private bool isLoading { get; set; } = true;
    private List<string> NameSource = new List<string>();
    private SfGrid<ProductComponentDTO> GridRef;

    private ProductComponentDTO component1 = new ProductComponentDTO
    {
        Id = 1,
        ProductId = 1,
        ComponentIngredientId = 1,
        ComponentProductId = null,
        Amount = 0.5,
    };

    private ProductComponentDTO component2 = new ProductComponentDTO
    {
        Id = 2,
        ProductId = 1,
        ComponentIngredientId = null,
        ComponentProductId = 1,
        Amount = 1.0
    };

    private ProductComponentDTO component3 = new ProductComponentDTO
    {
        Id = 3,
        ProductId = 1,
        ComponentIngredientId = 2,
        ComponentProductId = null,
        Amount = 1.5
    };
    private ProductComponentDTO component4 = new ProductComponentDTO
    {
        Id = 3,
        ProductId = 1,
        ComponentIngredientId = null,
        ComponentProductId = 2,
        Amount = 1.5
    };
    private ProductComponentDTO component5 = new ProductComponentDTO
    {
        Id = 3,
        ProductId = 1,
        ComponentIngredientId = 3,
        ComponentProductId = null,
        Amount = 1.5
    };
    private ProductComponentDTO component6 = new ProductComponentDTO
    {
        Id = 3,
        ProductId = 1,
        ComponentIngredientId = null,
        ComponentProductId = 3,
        Amount = 1.5
    };

    [Inject]
    UserManager<IdentityUser>
    userManager
    { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState>
        authenticationState
    { get; set; }
    private string authenticatedUserId;

    private List<string>
        UnitsOfMeasure = new List<string>
            ();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductComponents = await _ProductComponentRepository.GetAll(Id);
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            Components = await _componentRepository.GetAll(authenticatedUserId);
            Products = await _productRepository.GetAll(authenticatedUserId);
            isLoading = false;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

        ((List<ProductComponentDTO>
            )ProductComponents).Add(component1);
            ((List<ProductComponentDTO>
                )ProductComponents).Add(component2);
            ((List<ProductComponentDTO>
                )ProductComponents).Add(component3);
            ((List<ProductComponentDTO>
                )ProductComponents).Add(component4);
            ((List<ProductComponentDTO>
                )ProductComponents).Add(component5);
            ((List<ProductComponentDTO>
                )ProductComponents).Add(component6);

            foreach (var pc in ProductComponents)
            {
                GetProperty(pc);
            }

            StateHasChanged();
        }
    }

    private void GetProperty(ProductComponentDTO component)
    {
        component.ProductId = Id;
        if (component.ComponentIngredientId != null)
        {
            var ingredient = Components.FirstOrDefault(c => c.ComponentId == component.ComponentIngredientId);
            if (ingredient != null)
            {
                component.Name = ingredient.Name;
                component.Category = "ingredient";
            }
        }
        else if (component.ComponentProductId != null)
        {
            var product = Products.FirstOrDefault(p => p.Id == component.ComponentProductId);
            if (product != null)
            {
                component.Name = product.Name;
                component.Category = "product";
            }
        }
        else
        {
            component.Name = "Not Found";
            component.Category = "Not Found";
        }
        return;
    }

    private void OnCategoryChange(ChangeEventArgs<string, string> args)
    {
        NameSource = new List<string>();
        if (args.Value == "ingredient")
        {
            foreach (var component in Components)
            {
                NameSource.Add(component.Name);
            }
        }
        else
        {
            foreach (var product in Products)
            {
                NameSource.Add(product.Name);
            }
        }
        GridRef.PreventRender(false);
    }

    private async void Save(int id)
    {
        Product.Cost = 0;
        ProductComponents = await _ProductComponentRepository.GetAll(id);
        await _productRepository.Update(Product);
        _nav.NavigateTo("products");
    }
}
