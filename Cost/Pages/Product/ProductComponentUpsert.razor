@page "/product/price/{Id:int}"
@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject IProductComponentRepository _ProductComponentRepository
@inject NavigationManager _nav

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>
                    @Product.Other
                </span>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-12">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col" class="col-1"></th>
                            <th scope="col" class="col-4">Ingredient</th>
                            <th scope="col" class="col-2">Amount</th>
                            <th scope="col" class="col-3">UoM</th>
                            <th scope="col" class="col-2">Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var component in @Components)
                        {
                            <tr>
                                <td>
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="@component.ComponentId" @bind="@IngredientCheckedItems[component.ComponentId]">
                                    </div>
                                </td>
                                <td>@component.Name</td>
                                <td><input type="number" name="apple" value="0" min="0" disabled="@(!IngredientCheckedItems[component.ComponentId])"></td>
                                <td>g</td>
                                <td>@component.Price</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr class="table-light">
                            <td colspan="4">Total Component Price:</td>
                            <td>@TotalIngredientPrice</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>

    <div class="container">
        <div class="row">
            <div class="col-12">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th scope="col" class="col-1"></th>
                            <th scope="col" class="col-4">Product</th>
                            <th scope="col" class="col-2">Amount</th>
                            <th scope="col" class="col-3">UoM</th>
                            <th scope="col" class="col-2">Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in @Products)
                        {
                            <tr>
                                <td>
                                    <div class="custom-control custom-checkbox">
                                        <input type="checkbox" class="custom-control-input" id="@product.Id" @bind="@ProductCheckedItems[product.Id]">
                                    </div>
                                </td>
                                <td>@product.Name</td>
                                <td><input type="number" name="apple" value="0" min="0" disabled="@(!ProductCheckedItems[product.Id])"></td>
                                <td>g</td>
                                <td>@product.Cost</td>
                            </tr>
                        }
                    </tbody>
                    <tfoot>
                        <tr class="table-light">
                            <td colspan="4">Total Product Price:</td>
                            <td>@TotalProductPrice</td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>



    <button class="btn btn-primary" @onclick="()=>Save(Id)">Save</button>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    private bool isLoading { get; set; } = true;
    public Dictionary<int, bool> IngredientCheckedItems { get; set; } = new Dictionary<int, bool>();
    public Dictionary<int, bool> ProductCheckedItems { get; set; } = new Dictionary<int, bool>();

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;

    private List<string> UnitsOfMeasure = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductComponents = await _ProductComponentRepository.GetAll(Id);
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            Components = await _componentRepository.GetAll(authenticatedUserId);
            Products = await _productRepository.GetAll(authenticatedUserId);
            isLoading = false;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

            foreach (var component in Components)
            {
                IngredientCheckedItems.Add(component.ComponentId, false);
            }

            foreach (var product in Products)
            {
                ProductCheckedItems.Add(product.Id, false);
            }

            StateHasChanged();
        }

    }

    public double TotalIngredientPrice => Components.Where(i => IngredientCheckedItems[i.ComponentId]).Sum(i => i.Price);
    public double TotalProductPrice => Products.Where(i => ProductCheckedItems[i.Id]).Sum(i => i.Cost);

    private async void Save(int id)
    {
        Product.Cost = 0;
        ProductComponents = await _ProductComponentRepository.GetAll(id);
        //foreach (var component in ProductComponent)
        //{
        //    Product.Cost += (double)component.Price;
        //}
        await _productRepository.Update(Product);
        _nav.NavigateTo("products");
    }
}
