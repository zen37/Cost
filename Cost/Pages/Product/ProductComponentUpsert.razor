@page "/product/price/{Id:int}"
@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject IProductComponentRepository _ProductComponentRepository
@inject NavigationManager _nav

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>
                    @Product.Other
                </span>
            </div>
        </div>
    </div>

    <SfGrid @ref="ProductComponentGrid" DataSource="@ProductComponents" AllowPaging="true" Toolbar="@(new List<string>{"Add", "Edit", "Update", "Delete", "Cancel"})" AllowFiltering="true" AllowSorting="true">
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductComponentDTO"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Amount" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridColumns>
            <GridForeignColumn Field=@nameof(ProductComponentDTO.ComponentIngredientId) HeaderText="Ingredients Name" ForeignKeyValue="Name" ForeignDataSource="@Components">
                <FilterTemplate>
                    <SfDropDownList Placeholder="Select a Ingredient" ID="Name" @bind-Value="@((context as PredicateModel<string>).Value)" TItem="ComponentDTO" TValue="string" DataSource="@Components">
                        <DropDownListEvents TItem="ComponentDTO" TValue="string" OnValueSelect="@SelectComponent"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </FilterTemplate>
            </GridForeignColumn>

            <GridForeignColumn IsPrimaryKey="true" Field=@nameof(ProductComponentDTO.ComponentProductId) HeaderText="Products Name" ForeignKeyValue="Name" ForeignDataSource="@Products">
                <FilterTemplate>
                    <SfDropDownList Placeholder="Select a Product" ID="Name" @bind-Value="@((context as PredicateModel<string>).Value)" TItem="ProductDTO" TValue="string" DataSource="@Products">
                        <DropDownListEvents TItem="ProductDTO" TValue="string" OnValueSelect="@SelectProduct"></DropDownListEvents>
                        <DropDownListFieldSettings Value="Name" Text="Name"></DropDownListFieldSettings>
                    </SfDropDownList>
                </FilterTemplate>
            </GridForeignColumn>

            @*<GridColumn Field=@nameof(ProductComponentDTO.ComponentUoM) HeaderText="UoM">
            <EditTemplate>
                <SfDropDownList DataSource="UnitsOfMeasure" TItem="string" TValue="string" Placeholder="Select a Component UoM" @bind-Value="((context as ProductComponentDTO).ComponentUoM)">
                    <DropDownListEvents TItem="string" TValue="string" OnValueSelect="@SelectUoM"></DropDownListEvents>
                </SfDropDownList>
            </EditTemplate>
        </GridColumn>*@
            <GridColumn Field=@nameof(ProductComponentDTO.Amount) HeaderText="Amount"></GridColumn>
            @*<GridCommandColumns>
        <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
        <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat"})"></GridCommandColumn>
        <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat"})"></GridCommandColumn>
        <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat"})"></GridCommandColumn>
        </GridCommandColumns>*@
        </GridColumns>
    </SfGrid>

    <button class="btn btn-primary" @onclick="()=>Save(Id)">Save</button>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    private bool isLoading { get; set; } = true;
    public SfGrid<ProductComponentDTO> ProductComponentGrid;

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;

    private List<string> UnitsOfMeasure = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductComponents = await _ProductComponentRepository.GetAll(Id);
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            Components = await _componentRepository.GetAll(authenticatedUserId);
            Products = await _productRepository.GetAll(authenticatedUserId);
            isLoading = false;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

            StateHasChanged();
        }

    }

    public async void ActionHandler(ActionEventArgs<ProductComponentDTO> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            var ingredient = await _componentRepository.Get(args.Data.ComponentIngredientId);
            //args.Data.Price = ingredient.BasePrice * args.Data.Amount / UtilitiesUoM.GetFactorbyUoMName(args.Data.ComponentUoM);

            if (args.Action == "Add")
            {
                args.Data.ProductId = Id;
                await _ProductComponentRepository.Create(args.Data);
                ProductComponents = await _ProductComponentRepository.GetAll(Id);
                ProductComponentGrid.Refresh();
            }
            if (args.Action == "Edit")
            {

                await _ProductComponentRepository.Update(args.Data);
            }
            if (args.Action == "Update")
            {
                await _ProductComponentRepository.Update(args.Data);
            }
        }
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _ProductComponentRepository.Delete(args.Data.ProductId);
            ProductComponentGrid.Refresh();
        }
    }

    private void SelectComponent(SelectEventArgs<ComponentDTO> args)
    {
        Console.WriteLine(args.ItemData);
    }

    private void SelectProduct(SelectEventArgs<ProductDTO> args)
    {
        Console.WriteLine(args.ItemData);
    }

    private void SelectUoM(SelectEventArgs<string> args)
    {
        Console.WriteLine(args.ItemData);
    }

    private async void Save(int id)
    {
        Product.Cost = 0;
        ProductComponents = await _ProductComponentRepository.GetAll(id);
        //foreach (var component in ProductComponent)
        //{
        //    Product.Cost += (double)component.Price;
        //}
        await _productRepository.Update(Product);
        _nav.NavigateTo("products");
    }
}
