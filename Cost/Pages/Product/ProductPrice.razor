@page "/product/price/{Id:int}"
@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject IProductPriceRepository _productPriceRepository

<h3 class="card-title text-primary mb-3 ml-3">Product Price Management</h3>
@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row border p-2 mb-4">
        <div class="col-11">
            <div class="card-body">
                <h4>@Product.Name</h4>
                <span>
                    @Product.Other
                </span>
            </div>
        </div>
    </div>

    <SfGrid @ref="productPriceGrid" DataSource="@ProductPrices" AllowPaging="true" Toolbar="@(new List<string>{"Add", "Edit", "Update", "Delete", "Cancel"})" AllowFiltering="true" AllowSorting="true">
        <GridEditSettings AllowAdding="true" AllowEditing="true" ShowDeleteConfirmDialog="true" AllowDeleting="true"></GridEditSettings>
        <GridEvents OnActionBegin="ActionHandler" TValue="ProductPriceDTO"></GridEvents>
        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
        <GridSortSettings AllowUnsort="false">
            <GridSortColumns>
                <GridSortColumn Field="Amount" Direction="SortDirection.Ascending"></GridSortColumn>
            </GridSortColumns>
        </GridSortSettings>
        <GridPageSettings PageSize="5" PageCount="5" PageSizes="true"></GridPageSettings>
        <GridColumns>
            <GridColumn IsPrimaryKey="true" AllowAdding="false" Field=@nameof(ProductPriceDTO.ComponentId) HeaderText="Component Name" EditType="EditType.DropDownEdit">
                <EditTemplate>
                    <SfDropDownList DataSource="Components" TItem="ComponentDTO" TValue="int" Placeholder="Select a Component" @bind-Value="((context as ProductPriceDTO).ComponentId)">
                        <DropDownListFieldSettings Text="Name" Value="Id">
                        </DropDownListFieldSettings>
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.ComponentUoM) HeaderText="UoM">
                <EditTemplate>
                    <SfDropDownList DataSource="UnitsOfMeasure" TItem="string" TValue="string" Placeholder="Select a Component UoM" @bind-Value="((context as ProductPriceDTO).ComponentUoM)">
                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field=@nameof(ProductPriceDTO.Amount) HeaderText="Amount" Format="C2"></GridColumn>
            <GridCommandColumns>
                <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit", CssClass = "e-flat"})"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete", CssClass = "e-flat"})"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-update", CssClass = "e-flat"})"></GridCommandColumn>
                <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon", CssClass = "e-flat"})"></GridCommandColumn>
            </GridCommandColumns>
        </GridColumns>
    </SfGrid>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDTO Product { get; set; } = new();
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    private bool isLoading { get; set; } = true;
    public SfGrid<ProductPriceDTO> productPriceGrid;

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;

    private List<string> UnitsOfMeasure = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if(firstRender)
        {
            isLoading = true;
            StateHasChanged();
            Product = await _productRepository.Get(Id);
            ProductPrices = await _productPriceRepository.GetAll(Id);
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            Components = await _componentRepository.GetAll(authenticatedUserId);
            isLoading = false;

            if (!UnitsOfMeasure.Any())
            {
                UnitsOfMeasure = UtilitiesUoM.GetNameUoM();
            }

            StateHasChanged();
        }

    }

    public async void ActionHandler(ActionEventArgs<ProductPriceDTO> args)
    {
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action=="Add")
            {

                await _productPriceRepository.Create(args.Data);
                ProductPrices = await _productPriceRepository.GetAll(Id);
                productPriceGrid.Refresh();
            }
            if (args.Action=="Edit")
            {
                await _productPriceRepository.Update(args.Data);
            }
        }
        if(args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await _productPriceRepository.Delete(args.Data.Id);
            productPriceGrid.Refresh();
        }
    }
}
