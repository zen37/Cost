@page "/products"

@inject IProductRepository _product
@inject IJSRuntime _jsRuntime

@attribute [Authorize]

<PageTitle>Product</PageTitle>
<AuthorizeView>
    <Authorized>
        <_DeleteConfirmation ConfirmationChanged="ConfirmDelete_Click"></_DeleteConfirmation>
        <div class="row mt-4 p-3">
            <div class="col-6">
                <h4 class="card-title text-primary">Product List</h4>
            </div>
            <div class="col-4 offset-2">
                <a href="product/create" class="btn btn-primary form-control">Add New Product</a>
            </div>
        </div>

        @if (products == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <div class="col-12 p-3">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Name</th>
                            <th>Cost</th>
                            <th>Other</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in products)
                        {
                            <tr>
                                <td>@product.Name</td>
                                <td>@product.Cost</td>
                                <td>@product.Other</td>
                                <td>
                                    <NavLink href="@($"/product/edit/{product.Id}")" class="btn-primary btn">Edit</NavLink>
                                    <NavLink href="@($"/product/price/{product.Id}")" class="btn-success btn">Ingredients</NavLink>
                                    <button class="btn btn-danger" @onclick="()=>Delete(product.Id)">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>


@code {

    [Inject]
    UserManager<IdentityUser> userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> authenticationState { get; set; }
    private string authenticatedUserId;

    private IEnumerable<ProductDTO> products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductPriceDTO> ProductPrices { get; set; } = new List<ProductPriceDTO>();
    public bool isLoading { get; set; }
    private int DeleteProductId { get; set; } = 0;

    //protected override async Task OnAfterRenderAsync(bool firstRender)
    //{
    //    if (firstRender)
    //    {
    //        await LoadProducts();
    //    }
    //}

    private async Task LoadProducts()
    {
        var user = (await authenticationState).User;
        if (user.Identity.IsAuthenticated)
        {
            var authenticatedUser = await userManager.GetUserAsync(user);
            authenticatedUserId = authenticatedUser.Id;
            products = await _product.GetAll(authenticatedUserId);
        }

        isLoading = false;
    }


    protected override async Task OnInitializedAsync()
    {
        await Task.Run(LoadProducts);
    }

    private void Delete(int id)
    {
        DeleteProductId = id;
        _jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        if (isConfirmed && DeleteProductId != 0)
        {
            // delete
            await _product.Delete(DeleteProductId);
            await LoadProducts();
            await _jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
        }
    }
}

