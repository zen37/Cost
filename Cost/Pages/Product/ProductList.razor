@page "/products"

@inject IComponentRepository _componentRepository
@inject IProductRepository _productRepository
@inject NavigationManager _nav
@inject IProductComponentRepository _ProductComponentRepository

@attribute [Authorize]

<PageTitle>Product</PageTitle>
<AuthorizeView>
    <Authorized>
        <div class="row mt-4 p-3">
            <div class="col-6">
                <h4 class="card-title text-primary">Product List</h4>
            </div>
        </div>

        @if (Products == null)
        {
            <p><em>Loading...</em></p>
        }
        else
        {
            <SfToast ID="toast_default" @ref="ToastObj" Title="CANNOT DELETE THIS PRODUCT" Content="@ToastContent"
                     ShowCloseButton="true" NewestOnTop="true" ShowProgressBar="true">
                <ToastPosition X="Center"></ToastPosition>
            </SfToast>

            <SfGrid @ref="Grid" DataSource="@Products" AllowPaging="true" AllowSorting="true" Toolbar="@(new List<string>() { "Add", "Edit", "Delete", "Cancel", "Update"})">
                <GridPageSettings PageSize="10"></GridPageSettings>
                <GridEvents CommandClicked="OnCommandClicked" OnActionBegin="OnActionBegin" OnActionComplete="OnActionComplete" TValue="ProductDTO"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowEditing="true" AllowDeleting="true" Mode="EditMode.Dialog"></GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(ProductDTO.Name) HeaderText="Name" IsPrimaryKey="true"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.Price) HeaderText="Price"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.Cost) HeaderText="Cost" Format="C2" AllowAdding="false" AllowEditing="false"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.CostWastage) HeaderText="Cost Wastage" Format="C2" AllowAdding="false" AllowEditing="false"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.CostPercentage) HeaderText="Cost(%)" Format="P2" AllowAdding="false" AllowEditing="false"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.CostWastagePercentage) HeaderText="Cost Wastage(%)" Format="P2" AllowAdding="false" AllowEditing="false"></GridColumn>
                    <GridColumn Field=@nameof(ProductDTO.Other) HeaderText="Other"></GridColumn>
                    <GridColumn HeaderText="Manage Records">
                        <GridCommandColumns>
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { Content = "Details", CssClass = "e-flat" })"></GridCommandColumn>
                        </GridCommandColumns>
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        }
    </Authorized>
    <NotAuthorized>
        You are not logged in.
    </NotAuthorized>
</AuthorizeView>


@code {

    [Inject]
    UserManager<IdentityUser>? userManager { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState>? authenticationState { get; set; }
    private string? authenticatedUserId;
    private SfGrid<ProductDTO>? Grid { get; set; }
    private IEnumerable<ComponentDTO> Components { get; set; } = new List<ComponentDTO>();
    private IEnumerable<ProductDTO> Products { get; set; } = new List<ProductDTO>();
    private IEnumerable<ProductComponentDTO> ProductComponents { get; set; } = new List<ProductComponentDTO>();
    public bool isLoading { get; set; }
    private SfToast ToastObj;
    private int DeleteProductId { get; set; } = 0;

    private async Task LoadProducts()
    {
        if (authenticatedUserId != null)
        {
            Products = await _productRepository.GetAll(authenticatedUserId);
            Components = await _componentRepository.GetAll(authenticatedUserId);
            ProductComponents = await _ProductComponentRepository.GetAll(authenticatedUserId);
        }
    }

    private async Task CalculateProductPrice()
    {
        foreach (var prod in Products)
        {
            prod.Cost = 0;
            prod.CostWastage = 0;
            foreach (var comp in ProductComponents)
            {
                if (comp.ProductId == prod.Id)
                {
                    if (comp.ComponentIngredientId != null)
                    {
                        var c = Components.FirstOrDefault(c => c.ComponentId == comp.ComponentIngredientId);
                        if (c != null)
                        {
                            prod.Cost += Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitPrice(c.Amount, c.UoM, c.Price), comp.Amount);
                            prod.CostWastage += Calculate.GetProductComponentPrice(comp.UoM, Calculate.GetUnitWastagePrice(c.Amount, c.UoM, c.Price, c.Wastage), comp.Amount);
                        }
                    }
                    else if (comp.ComponentProductId != null)
                    {
                        var p = Products.FirstOrDefault(p => p.Id == comp.ComponentProductId);
                        if (p != null)
                        {
                            prod.Cost += Calculate.GetProductComponentPrice(comp.UoM, p.Cost, comp.Amount);
                            prod.CostWastage += Calculate.GetProductComponentPrice(comp.UoM, p.CostWastage, comp.Amount);
                        }
                    }
                }
            }
            prod.CostPercentage = prod.Cost / prod.Price;
            prod.CostWastagePercentage = prod.CostWastage / prod.Price;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var user = (await authenticationState).User;
        if (firstRender)
        {
            isLoading = true;
            StateHasChanged();
            if (user.Identity.IsAuthenticated)
            {
                var authenticatedUser = await userManager.GetUserAsync(user);
                authenticatedUserId = authenticatedUser.Id;
            }
            await Task.Run(LoadProducts);
            await Task.Run(CalculateProductPrice);
            isLoading = false;
            StateHasChanged();
        }
    }

    public async Task OnActionBegin(ActionEventArgs<ProductDTO> args)
    {
        if (args.RequestType.ToString() == "Save")
        {
            Console.WriteLine("save");
            if (args.Data.Id == 0)
            {
                args.Data.UserId = authenticatedUserId;
                await _productRepository.Create(args.Data);
            }
            else
            {
                args.Data.UserId = authenticatedUserId;
                await _productRepository.Update(args.Data);
            }
        }
        if (args.RequestType.ToString() == "Delete")
        {
            Console.WriteLine("delete");
            var DeleteProductComponent = ProductComponents.FirstOrDefault(p => p.ComponentProductId == args.Data.Id);
            if (DeleteProductComponent != null)
            {
                args.Cancel = true;
                ShowToast();
            }
            else
            {
                await _productRepository.Delete(args.Data.Id);
                Products = await _productRepository.GetAll(authenticatedUserId);
            }
        }
    }

    public async Task OnActionComplete(ActionEventArgs<ProductDTO> args)
    {
        if (args.RequestType.ToString() == "Add" || args.RequestType.ToString() == "BeginEdit")
        {
            args.PreventRender = false;
        }
        if (args.RequestType.ToString() == "Save")
        {
            Products = await _productRepository.GetAll(authenticatedUserId);
            await Grid.Refresh();
        }
    }

    public void OnCommandClicked(CommandClickEventArgs<ProductDTO> args)
    {
        _nav.NavigateTo($"product/price/{args.RowData.Id}");
    }

    private string ToastContent = "<div> Please delete after removing from recepe.</div>";
    private async Task ShowToast()
    {
        await this.ToastObj.ShowAsync();
    }
}

